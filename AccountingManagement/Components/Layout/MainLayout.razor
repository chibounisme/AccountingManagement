@inherits LayoutComponentBase
@inject IStringLocalizer<AppStrings> Localizer
@inject NavigationManager NavManager
@inject AuthService AuthService

<div class="app-container">
    <CascadingAuthenticationState>
        <AuthorizeView>
            <NotAuthorized>
                @{
                    // If not authorized and not on login page, redirect to login
                    var currentUri = NavManager.Uri;
                    if (!currentUri.EndsWith("/login", StringComparison.OrdinalIgnoreCase))
                    {
                        NavManager.NavigateTo("/login", replace: true);
                    }
                }
                <div class="content-area-full">
                    @Body
                </div>
            </NotAuthorized>
            <Authorized>
                <div class="sidebar">
                    <NavMenu />
                </div>
                <main class="content-area">
                    <div class="top-bar">
                        <span>@Localizer["ApplicationTitle"]</span>
                        <div class="user-profile">
                            <span class="username">@context.User.Identity?.Name</span>
                            <button class="logout-button" @onclick="HandleLogout">@Localizer["LogoutButton"]</button>
                        </div>
                    </div>
                    <article class="page-content px-4">
                        @Body
                    </article>
                </main>
            </Authorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</div>

@code {
    private void HandleLogout()
    {
        AuthService.Logout();
        NavManager.NavigateTo("/login", forceLoad: true); // Force load can help reset state
    }

    protected override async Task OnInitializedAsync()
    {
        // This is a good place to ensure the auth state is current when layout loads
        // For example, if CustomAuthenticationStateProvider needed async init.
        // Here, we primarily rely on the CascadingAuthenticationState and AuthorizeView.
        // If the user is not authenticated, they will be directed to login if trying to access protected routes.
        // The NotAuthorized block above handles redirecting to login if not already there.
        await base.OnInitializedAsync();
    }
}