@page "/login"
@layout EmptyLayout
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject IStringLocalizer<AppStrings> Localizer

<div class="login-container">
    <div class="login-form">
        <img src="images/app_logo_placeholder.svg" alt="Logo" class="login-logo" />
        <h1>@Localizer["LoginPageTitle"]</h1>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="username">@Localizer["UsernameLabel"]</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" />
            </div>
            
            <div class="form-group">
                <label for="password">@Localizer["PasswordLabel"]</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            
            @* <div class="form-group form-check">
                <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                <label for="rememberMe" class="form-check-label">@Localizer["RememberMeLabel"]</label>
            </div> *@

            <button type="submit" class="btn btn-primary btn-block" disabled="@isLoggingIn">
                @if (isLoggingIn)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> @Localizer["Loading"]</span>
                }
                else
                {
                    <span>@Localizer["LoginButton"]</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string? errorMessage;
    private bool isLoggingIn = false;

    private async Task HandleLogin()
    {
        isLoggingIn = true;
        errorMessage = null;
        StateHasChanged(); // Update UI to show spinner

        var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
        if (success)
        {
            NavManager.NavigateTo("/"); // Navigate to dashboard or home page
        }
        else
        {
            errorMessage = Localizer["InvalidLoginAttempt"];
        }
        isLoggingIn = false;
        StateHasChanged(); // Update UI
    }

    public class LoginModel
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "RequiredField")]
        public string Username { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "RequiredField")]
        public string Password { get; set; } = string.Empty;

        // public bool RememberMe { get; set; } // Future implementation
    }

    protected override void OnInitialized()
    {
        // If user is already authenticated, redirect them away from login page
        var authState = AuthService.CurrentUser; // This might need to come from AuthenticationStateProvider
        if (authState != null) // A simplified check, proper check uses AuthenticationState
        {
            // Task.Run(async () => {
            //     var state = await AuthStateProvider.GetAuthenticationStateAsync();
            //     if (state.User.Identity.IsAuthenticated) NavManager.NavigateTo("/");
            // });
        }
    }
}