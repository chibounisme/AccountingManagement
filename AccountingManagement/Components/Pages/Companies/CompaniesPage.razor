@page "/companies"
@attribute [Authorize(Roles = "Admin, Accountant")]
@inject CompanyService CompanySvc
@inject UserService UserSvc
@inject NavigationManager NavManager
@inject IStringLocalizer<AppStrings> Localizer
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>@Localizer["CompaniesPageTitle"]</PageTitle>

<div class="page-header">
    <h1>@Localizer["CompaniesPageTitle"]</h1>
    <button class="btn btn-primary" @onclick="AddNewCompany">@Localizer["Add"] @Localizer["MenuCompanies", true]</button> 
    <!-- Add 'MenuCompanies, true' to RESX for lowercase 'soci?t?' or singular -->
</div>

@if (isLoading)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else if (companies == null || !companies.Any())
{
    <p>@Localizer["NoCompaniesFound"]</p> <!-- Add to RESX -->
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Localizer["CompanyName"]</th>
                <th>@Localizer["CompanyLegalName"]</th>
                <th>@Localizer["CompanyTaxId"]</th>
                <th>@Localizer["CompanyCity"]</th>
                @if (currentUser?.Role == UserRole.Admin) {
                    <th>@Localizer["CompanyAccountant"]</th>
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var company in companies)
            {
                <tr>
                    <td>@company.Name</td>
                    <td>@company.LegalName</td>
                    <td>@company.TaxIdentificationNumber</td>
                    <td>@company.City</td>
                    @if (currentUser?.Role == UserRole.Admin) {
                        <td>@(accountantMap.ContainsKey(company.AccountantId ?? -1) ? accountantMap[company.AccountantId ?? -1].FullName : "N/A")</td>
                    }
                    <td class="table-actions">
                        <button class="btn btn-sm btn-secondary" @onclick="() => EditCompany(company.Id)">@Localizer["Edit"]</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDeleteCompany(company.Id)">@Localizer["Delete"]</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Company>? companies;
    private Models.User? currentUser;
    private Dictionary<int, Models.User> accountantMap = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;
        if (userPrincipal.Identity != null && userPrincipal.Identity.IsAuthenticated)
        {
            var userIdClaim = userPrincipal.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(userIdClaim, out int userId))
            {
                currentUser = await UserSvc.GetUserByIdAsync(userId);
            }
        }

        if (currentUser == null)
        {
            NavManager.NavigateTo("/login"); // Should not happen due to [Authorize]
            return;
        }
        
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        isLoading = true;
        if (currentUser != null)
        {
            companies = await CompanySvc.GetCompaniesAsync(currentUser);
            if (currentUser.Role == UserRole.Admin && companies != null)
            {
                var accountants = await UserSvc.GetAccountantsAsync();
                accountantMap = accountants.ToDictionary(a => a.Id);
            }
        }
        isLoading = false;
        StateHasChanged();
    }

    private void AddNewCompany()
    {
        NavManager.NavigateTo("/companies/add");
    }

    private void EditCompany(int companyId)
    {
        NavManager.NavigateTo($"/companies/edit/{companyId}");
    }

    private async Task ConfirmDeleteCompany(int companyId)
    {
        var companyToDelete = companies?.FirstOrDefault(c => c.Id == companyId);
        if (companyToDelete == null) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"{Localizer["ConfirmDelete"]} {companyToDelete.Name}?");
        if (confirmed)
        {
            await CompanySvc.DeleteCompanyAsync(companyId);
            await LoadCompanies(); // Reload the list
        }
    }
}