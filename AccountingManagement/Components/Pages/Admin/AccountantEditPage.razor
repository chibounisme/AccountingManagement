@page "/admin/accountants/add"
@page "/admin/accountants/edit/{UserId:int}"
@attribute [Authorize(Roles = "Admin")]

@inject UserService UserSvc
@inject NavigationManager NavManager
@inject IStringLocalizer<AppStrings> Localizer

@if (isLoading)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
    <div class="page-header">
        <h1>@(IsNewUser? Localizer["AddAccountantPageTitle"] : Localizer["EditAccountantPageTitle"])</h1>
    </div>

    <EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary /> <!-- For property-level errors not caught by ValidationMessage -->

        <div class="card">
            <div class="card-body">
                <div class="form-grid">
                    <div class="form-group">
                        <label for="fullName">@Localizer["UserFullName"]</label>
                        <InputText id="fullName" class="form-control" @bind-Value="userModel.FullName" />
                        <ValidationMessage For="@(() => userModel.FullName)" />
                    </div>

                    <div class="form-group">
                        <label for="username">@Localizer["UsernameLabel"]</label>
                        <InputText id="username" class="form-control" @bind-Value="userModel.Username" disabled="@(!IsNewUser && userModel.Username == "admin")" />
                        <ValidationMessage For="@(() => userModel.Username)" />
                        @if (!string.IsNullOrEmpty(usernameExistsError))
                        {
                            <div class="validation-message">@usernameExistsError</div>
                        }
                    </div>

                    <div class="form-group">
                        <label for="email">@Localizer["UserEmail"]</label>
                        <InputText id="email" type="email" class="form-control" @bind-Value="userModel.Email" />
                        <ValidationMessage For="@(() => userModel.Email)" />
                    </div>

                    <div class="form-group">
                        <label for="role">@Localizer["UserRole"]</label>
                        <InputSelect id="role" class="form-control" @bind-Value="userModel.Role" disabled="@(!IsNewUser && userModel.Username == "admin")">
                            @foreach (var role in Enum.GetValues<UserRole>())
                            {
                                <option value="@role">@Localizer[$"UserRole{role}"]</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => userModel.Role)" />
                    </div>

                    <div class="form-group">
                        <label for="password">@Localizer["PasswordLabel"] @(IsNewUser ? "" : Localizer["OptionalLeaveBlank"])</label> <!-- Add to RESX -->
                        <InputText id="password" type="password" class="form-control" @bind-Value="userModel.Password" />
                        <ValidationMessage For="@(() => userModel.Password)" />
                    </div>

                    <div class="form-group">
                        <label for="confirmPassword">@Localizer["UserPasswordConfirm"]</label>
                        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="userModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => userModel.ConfirmPassword)" />
                    </div>

                    @if (!IsNewUser)
                    {
                        <div class="form-group">
                            <label for="isActive">@Localizer["UserIsActive"]</label>
                            <div>
                                <InputCheckbox id="isActive" @bind-Value="userModel.IsActive" disabled="@(!IsNewUser && userModel.Username == "admin")" />
                            </div>
                            <ValidationMessage For="@(() => userModel.IsActive)" />
                        </div>
                    }
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span>@Localizer["Saving"]...</span>
                    }
                    else
                    {

                        <span>@Localizer["Save"]</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">@Localizer["Cancel"]</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? UserId { get; set; }

    // Use a ViewModel for editing to include Password & ConfirmPassword
    private UserEditModel userModel = new UserEditModel();
    private string? originalUsername; // To check if username changed
    private string? usernameExistsError;

    private bool IsNewUser => UserId == null;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        if (!IsNewUser && UserId.HasValue)
        {
            var loadedUser = await UserSvc.GetUserByIdAsync(UserId.Value);
            if (loadedUser != null)
            {
                userModel.Id = loadedUser.Id;
                userModel.FullName = loadedUser.FullName;
                userModel.Username = loadedUser.Username;
                originalUsername = loadedUser.Username; // Store original username
                userModel.Email = loadedUser.Email;
                userModel.Role = loadedUser.Role;
                userModel.IsActive = loadedUser.IsActive;
                // Password and ConfirmPassword remain empty unless changed
            }
            else
            {
                NavManager.NavigateTo("/admin/accountants"); // Not found
                return;
            }
        }
        else // New user
        {
            userModel.IsActive = true; // Default to active for new users
            userModel.Role = UserRole.Accountant; // Default new users to Accountant
        }
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        usernameExistsError = null;

        if (userModel.Password != userModel.ConfirmPassword)
        {
            // This should ideally be a ValidationAttribute on the model
            usernameExistsError = Localizer["UserPasswordMismatch"]; // Use a general error or specific one
            isSaving = false;
            return;
        }

        if (IsNewUser || userModel.Username != originalUsername)
        {
            if (await UserSvc.UsernameExistsAsync(userModel.Username, IsNewUser ? null : userModel.Id))
            {
                usernameExistsError = Localizer["UserUsernameExists"];
                isSaving = false;
                return;
            }
        }

        // Prevent changing admin role or status
        if (userModel.Username == "admin" && !IsNewUser)
        {
            userModel.Role = UserRole.Admin;
            userModel.IsActive = true;
        }


        var userToSave = new Models.User
        {
            Id = userModel.Id,
            FullName = userModel.FullName,
            Username = userModel.Username,
            Email = userModel.Email,
            Role = userModel.Role,
            IsActive = userModel.IsActive
        };

        // Password is only set if provided (for new user or if changed)
        string? passwordToSet = null;
        if (!string.IsNullOrWhiteSpace(userModel.Password))
        {
            passwordToSet = userModel.Password;
        }
        else if (IsNewUser) // New user must have a password
        {
            // This case should be caught by [Required] on Password for new users in UserEditModel
            // For safety, add a check or ensure UserEditModel handles this.
            usernameExistsError = Localizer["PasswordRequiredForNewUser"]; // Add to RESX
            isSaving = false;
            return;
        }

        await UserSvc.SaveUserAsync(userToSave, passwordToSet);
        isSaving = false;
        NavManager.NavigateTo("/admin/accountants");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/admin/accountants");
    }

    // ViewModel for User Edit form
    public class UserEditModel
    {
        public int Id { get; set; }

        [System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "RequiredField")]
        [System.ComponentModel.DataAnnotations.StringLength(150, ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "FieldTooLong")] // Add "FieldTooLong" to RESX
        public string FullName { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "RequiredField")]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3, ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "FieldLengthError")] // Add "FieldLengthError" to RESX
        public string Username { get; set; } = string.Empty;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "RequiredField")]
        [System.ComponentModel.DataAnnotations.EmailAddress(ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "InvalidEmail")] // Add "InvalidEmail" to RESX
        public string Email { get; set; } = string.Empty;

        public UserRole Role { get; set; } = UserRole.Accountant;
        public bool IsActive { get; set; } = true;

        // Password is not required when editing (if left blank, it's not changed)
        // For new users, it should be required. This logic is handled in submit or with conditional validation.
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 6, ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "PasswordLengthError")] // Add "PasswordLengthError" to RESX
        public string? Password { get; set; }

        [System.ComponentModel.DataAnnotations.Compare(nameof(Password), ErrorMessageResourceType = typeof(AppStrings), ErrorMessageResourceName = "UserPasswordMismatch")]
        public string? ConfirmPassword { get; set; }
    }
}