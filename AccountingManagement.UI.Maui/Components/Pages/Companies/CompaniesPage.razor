@page "/companies"
@using AccountingManagement.Application.Abstractions
@attribute [Authorize(Roles = "Admin, Accountant")]
@inject ICompanyService AppCompanyService
@inject ICurrentUserService CurrentUserService
@inject NavigationManager NavManager
@inject Toolbelt.Blazor.I18nText.I18nText I18nTextService
@inject IJSRuntime JSRuntime

<PageTitle>@Strings.CompaniesPageTitle</PageTitle>

<div class="page-header">
    <h1>@Strings.CompaniesPageTitle</h1>
    <button class="btn btn-primary" @onclick="AddNewCompany">
        @Strings.Add @Strings.MenuCompanies
    </button>
</div>

@if (isLoading)
{
    <LoadingIndicator Message="@Strings.Loading" />
}
else if (companies == null || !companies.Any())
{
    <p class="text-text-secondary">@Strings.NoCompaniesFound</p>
}
else
{
    <div class="table-wrapper">
        <table class="table">
            <thead>
                <tr>
                    <th>@Strings.CompanyName</th>
                    <th>@Strings.CompanyLegalName</th>
                    <th>@Strings.CompanyTaxId</th>
                    <th>@Strings.CompanyCity</th>
                    @if (CurrentUserService.UserRole == UserRole.Admin)
                    {
                        <th>@Strings.CompanyAccountant</th>
                    }
                    <th class="text-right">@Strings.Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var company in companies)
                {
                    <tr>
                        <td class="font-medium text-text-primary">@company.Name</td>
                        <td>@company.LegalName</td>
                        <td>@company.TaxIdentificationNumber</td>
                        <td>@company.City</td>
                        @if (CurrentUserService.UserRole == UserRole.Admin)
                        {
                            <td>@(company.AccountantFullName ?? Strings.NotAssigned)</td>
                        }
                        <td class="text-right table-actions">
                            <button class="btn btn-secondary btn-xs" @onclick="() => EditCompany(company.Id)">@Strings.Edit</button>
                            <button class="btn btn-danger btn-xs" @onclick="() => ConfirmDeleteCompany(company)">@Strings.Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<ConfirmDialog @ref="confirmDialog" />

@code {
    private List<CompanyDto>? companies;
    private bool isLoading = true;
    private ConfirmDialog? confirmDialog;
    private AppStrings Strings = new();

    protected override async Task OnInitializedAsync()
    {
        Strings = await I18nTextService.GetTextTableAsync<AppStrings>(this);
        await LoadCompanies();
        await base.OnInitializedAsync();
    }

    private async Task LoadCompanies()
    {
        isLoading = true;
        StateHasChanged(); // Ensure loading indicator shows
        try
        {
            companies = await AppCompanyService.GetCompaniesForCurrentUserAsync();
            companies = companies.OrderBy(c => c.Name).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading companies: {ex.Message}");
            companies = new List<CompanyDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddNewCompany()
    {
        NavManager.NavigateTo("/companies/add");
    }

    private void EditCompany(int companyId)
    {
        NavManager.NavigateTo($"/companies/edit/{companyId}");
    }

    private async Task ConfirmDeleteCompany(CompanyDto company)
    {
        if (confirmDialog != null && await confirmDialog.ShowAsync(string.Format(Strings.ConfirmDeleteMessage, company.Name)!))
        {
            try
            {
                await AppCompanyService.DeleteCompanyAsync(company.Id);
                await LoadCompanies();
            }
            catch (Exception ex)
            {
                 Console.WriteLine($"Error deleting company: {ex.Message}");
            }
        }
    }
}