@page "/companies/add"
@page "/companies/edit/{CompanyId:int}"
@using System.ComponentModel.DataAnnotations
@using AccountingManagement.Application.Abstractions
@attribute [Authorize(Roles = "Admin, Accountant")]

@inject ICompanyService AppCompanyService
@inject IUserService AppUserService
@inject ICurrentUserService CurrentUserService
@inject NavigationManager NavManager
@inject Toolbelt.Blazor.I18nText.I18nText I18nTextService

@if (isLoading)
{
    <LoadingIndicator Message="@Strings.Loading" />
}
else
{
    <div class="page-header">
        <h1>@(IsNewCompany ? Strings.AddCompanyPageTitle : Strings.EditCompanyPageTitle)</h1>
    </div>

    <EditForm Model="@companyModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        
        <div class="card max-w-3xl mx-auto">
            <div class="card-body">
                <ValidationSummary class="mb-6 p-3 bg-red-100 text-red-700 rounded border border-red-300" />

                <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                    <div>
                        <label for="companyName" class="form-label">@Strings.CompanyName</label>
                        <InputText id="companyName" class="form-input" @bind-Value="companyModel.Name" />
                        <ValidationMessage For="@(() => companyModel.Name)" class="validation-message" />
                    </div>

                    <div>
                        <label for="legalName" class="form-label">@Strings.CompanyLegalName</label>
                        <InputText id="legalName" class="form-input" @bind-Value="companyModel.LegalName" />
                        <ValidationMessage For="@(() => companyModel.LegalName)" class="validation-message" />
                    </div>

                    <div>
                        <label for="taxId" class="form-label">@Strings.CompanyTaxId</label>
                        <InputText id="taxId" class="form-input" @bind-Value="companyModel.TaxIdentificationNumber" />
                        <ValidationMessage For="@(() => companyModel.TaxIdentificationNumber)" class="validation-message" />
                    </div>

                    <div>
                        <label for="tradeRegister" class="form-label">@Strings.CompanyTradeRegister</label>
                        <InputText id="tradeRegister" class="form-input" @bind-Value="companyModel.TradeRegisterNumber" />
                        <ValidationMessage For="@(() => companyModel.TradeRegisterNumber)" class="validation-message" />
                    </div>

                    <div>
                        <label for="activityCode" class="form-label">@Strings.CompanyActivityCode</label>
                        <InputText id="activityCode" class="form-input" @bind-Value="companyModel.ActivityCode" />
                        <ValidationMessage For="@(() => companyModel.ActivityCode)" class="validation-message" />
                    </div>

                    <div>
                        <label for="legalForm" class="form-label">@Strings.CompanyLegalForm</label>
                        <InputSelect id="legalForm" class="form-select" @bind-Value="companyModel.LegalForm">
                            @foreach (var legalFormValue in Enum.GetValues<LegalForm>())
                            {
                                <option value="@legalFormValue">@GetLocalizedLegalForm(legalFormValue)</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => companyModel.LegalForm)" class="validation-message" />
                    </div>

                    <div class="md:col-span-2">
                        <label for="creationDate" class="form-label">@Strings.CompanyCreationDate</label>
                        <InputDate id="creationDate" class="form-input" @bind-Value="companyModel.CompanyCreationDate" />
                        <ValidationMessage For="@(() => companyModel.CompanyCreationDate)" class="validation-message" />
                    </div>

                    @if (currentUserIsAdmin)
                    {
                        <div class="md:col-span-2">
                            <label for="accountant" class="form-label">@Strings.CompanyAccountant</label>
                            <InputSelect id="accountant" class="form-select" @bind-Value="companyModel.AccountantId">
                                <option value="">@Strings.SelectAccountant</option>
                                @if (availableAccountants != null)
                                {
                                    @foreach (var acc in availableAccountants)
                                    {
                                        <option value="@acc.Id">@acc.FullName (@acc.Username)</option>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => companyModel.AccountantId)" class="validation-message" />
                        </div>
                    }
                </div>

                <hr class="my-6 border-border-color" />
                <h3 class="text-lg font-medium leading-6 text-text-primary mb-4">@Strings.CompanyContactInfo</h3>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                    <div class="md:col-span-2">
                        <label for="address" class="form-label">@Strings.CompanyAddress</label>
                        <InputText id="address" class="form-input" @bind-Value="companyModel.Address" />
                        <ValidationMessage For="@(() => companyModel.Address)" class="validation-message" />
                    </div>

                    <div>
                        <label for="city" class="form-label">@Strings.CompanyCity</label>
                        <InputText id="city" class="form-input" @bind-Value="companyModel.City" />
                        <ValidationMessage For="@(() => companyModel.City)" class="validation-message" />
                    </div>

                    <div>
                        <label for="postalCode" class="form-label">@Strings.CompanyPostalCode</label>
                        <InputText id="postalCode" class="form-input" @bind-Value="companyModel.PostalCode" />
                        <ValidationMessage For="@(() => companyModel.PostalCode)" class="validation-message" />
                    </div>

                    <div>
                        <label for="country" class="form-label">@Strings.CompanyCountry</label>
                        <InputText id="country" class="form-input" @bind-Value="companyModel.Country" />
                        <ValidationMessage For="@(() => companyModel.Country)" class="validation-message" />
                    </div>

                    <div>
                        <label for="phone" class="form-label">@Strings.CompanyPhoneNumber</label>
                        <InputText id="phone" type="tel" class="form-input" @bind-Value="companyModel.PhoneNumber" />
                        <ValidationMessage For="@(() => companyModel.PhoneNumber)" class="validation-message" />
                    </div>
                    
                    <div class="md:col-span-2">
                        <label for="email" class="form-label">@Strings.CompanyEmail</label>
                        <InputText id="email" type="email" class="form-input" @bind-Value="companyModel.Email" />
                        <ValidationMessage For="@(() => companyModel.Email)" class="validation-message" />
                    </div>
                </div>
            </div>
            <div class="card-footer flex justify-end space-x-3">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">@Strings.Cancel</button>
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                     @if (isSaving)
                    {
                        <LoadingSpinner Small="true" /> @Strings.Saving
                    }
                    else
                    {
                        @Strings.Save
                    }
                </button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? CompanyId { get; set; }

    private CompanyFormModel companyModel = new() { CompanyCreationDate = DateTime.Today, Country = "Tunisie" };
    private List<UserDto>? availableAccountants;

    private bool IsNewCompany => CompanyId == null;
    private bool isLoading = true;
    private bool isSaving = false;
    private bool currentUserIsAdmin = false;
    private AppStrings Strings = new();
    
    protected override async Task OnInitializedAsync()
    {
        Strings = await I18nTextService.GetTextTableAsync<AppStrings>(this);
        currentUserIsAdmin = CurrentUserService.UserRole == UserRole.Admin;

        if (currentUserIsAdmin)
        {
            try
            {
                availableAccountants = await AppUserService.GetAccountantsAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading accountants: {ex.Message}");
                availableAccountants = new List<UserDto>();
            }
        }

        if (!IsNewCompany && CompanyId.HasValue)
        {
            try
            {
                var loadedCompany = await AppCompanyService.GetCompanyByIdAsync(CompanyId.Value);
                if (loadedCompany != null)
                {
                    companyModel.Id = loadedCompany.Id;
                    companyModel.Name = loadedCompany.Name;
                    companyModel.LegalName = loadedCompany.LegalName;
                    companyModel.TaxIdentificationNumber = loadedCompany.TaxIdentificationNumber;
                    companyModel.TradeRegisterNumber = loadedCompany.TradeRegisterNumber;
                    companyModel.Address = loadedCompany.Address;
                    companyModel.City = loadedCompany.City;
                    companyModel.PostalCode = loadedCompany.PostalCode;
                    companyModel.Country = loadedCompany.Country;
                    companyModel.PhoneNumber = loadedCompany.PhoneNumber;
                    companyModel.Email = loadedCompany.Email;
                    companyModel.ActivityCode = loadedCompany.ActivityCode;
                    companyModel.LegalForm = loadedCompany.LegalForm;
                    companyModel.CompanyCreationDate = loadedCompany.CompanyCreationDate;
                    companyModel.AccountantId = loadedCompany.AccountantId;
                }
                else
                {
                    NavManager.NavigateTo("/companies"); return;
                }
            }
            catch (UnauthorizedAccessException)
            {
                NavManager.NavigateTo("/companies"); return; 
            }
            catch (Exception ex)
            {
                 Console.WriteLine($"Error loading company: {ex.Message}");
                 NavManager.NavigateTo("/companies"); return;
            }
        }
        
        isLoading = false;
        await base.OnInitializedAsync();
    }

    private string GetLocalizedLegalForm(LegalForm legalForm)
    {
        return legalForm switch
        {
            LegalForm.SUARL => Strings.LegalForm_SUARL,
            LegalForm.SARL => Strings.LegalForm_SARL,
            LegalForm.SA => Strings.LegalForm_SA,
            LegalForm.SNC => Strings.LegalForm_SNC,
            _ => legalForm.ToString()
        };
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        StateHasChanged();

        try
        {
            if (IsNewCompany)
            {
                var createDto = new CreateCompanyDto
                {
                    Name = companyModel.Name, LegalName = companyModel.LegalName, TaxIdentificationNumber = companyModel.TaxIdentificationNumber,
                    TradeRegisterNumber = companyModel.TradeRegisterNumber, Address = companyModel.Address, City = companyModel.City,
                    PostalCode = companyModel.PostalCode, Country = companyModel.Country, PhoneNumber = companyModel.PhoneNumber,
                    Email = companyModel.Email, ActivityCode = companyModel.ActivityCode, LegalForm = companyModel.LegalForm,
                    CompanyCreationDate = companyModel.CompanyCreationDate, AccountantId = companyModel.AccountantId
                };
                await AppCompanyService.CreateCompanyAsync(createDto);
            }
            else
            {
                var updateDto = new UpdateCompanyDto
                {
                    Id = companyModel.Id, Name = companyModel.Name, LegalName = companyModel.LegalName, TaxIdentificationNumber = companyModel.TaxIdentificationNumber,
                    TradeRegisterNumber = companyModel.TradeRegisterNumber, Address = companyModel.Address, City = companyModel.City,
                    PostalCode = companyModel.PostalCode, Country = companyModel.Country, PhoneNumber = companyModel.PhoneNumber,
                    Email = companyModel.Email, ActivityCode = companyModel.ActivityCode, LegalForm = companyModel.LegalForm,
                    CompanyCreationDate = companyModel.CompanyCreationDate, AccountantId = companyModel.AccountantId
                };
                await AppCompanyService.UpdateCompanyAsync(updateDto);
            }
            NavManager.NavigateTo("/companies");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving company: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/companies");
    }

    public class CompanyFormModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "CompanyNameRequired")] 
        [MaxLength(200)]
        public string Name { get; set; } = string.Empty;

        [MaxLength(200)]
        public string LegalName { get; set; } = string.Empty;

        [Required(ErrorMessage = "TaxIdRequired")] 
        [MaxLength(50)]
        public string TaxIdentificationNumber { get; set; } = string.Empty;

        [MaxLength(50)]
        public string TradeRegisterNumber { get; set; } = string.Empty;

        [MaxLength(250)]
        public string Address { get; set; } = string.Empty;

        [MaxLength(100)]
        public string City { get; set; } = string.Empty;

        [MaxLength(20)]
        public string PostalCode { get; set; } = string.Empty;

        [MaxLength(100)]
        public string Country { get; set; } = "Tunisie";

        [MaxLength(50)]
        [Phone(ErrorMessage = "InvalidPhoneNumber")] 
        public string PhoneNumber { get; set; } = string.Empty;

        [MaxLength(150)]
        [EmailAddress(ErrorMessage = "InvalidEmailFormat")] 
        public string Email { get; set; } = string.Empty;

        [MaxLength(50)]
        public string ActivityCode { get; set; } = string.Empty;

        public LegalForm LegalForm { get; set; }

        [Required(ErrorMessage = "CreationDateRequired")] 
        public DateTime CompanyCreationDate { get; set; } = DateTime.Today;

        public int? AccountantId { get; set; }
    }
}