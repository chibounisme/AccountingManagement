@page "/admin/accountants"
@attribute [Authorize(Roles = "Admin")]
@inject IUserService AppUserService
@inject NavigationManager NavManager
@inject Toolbelt.Blazor.I18nText.I18nText I18nTextService
@inject IJSRuntime JSRuntime

<PageTitle>@Strings.AccountantsPageTitle</PageTitle>

<div class="page-header">
    <h1>@Strings.AccountantsPageTitle</h1>
    <button class="btn btn-primary" @onclick="AddNewAccountant">
        @Strings.Add @Strings.MenuAccountants
    </button>
</div>

@if (isLoading)
{
    <LoadingIndicator Message="@Strings.Loading" />
}
else if (users == null || !users.Any())
{
    <p class="text-text-secondary">@Strings.NoAccountantsFound</p>
}
else
{
    <div class="table-wrapper">
        <table class="table">
            <thead>
                <tr>
                    <th>@Strings.UserFullName</th>
                    <th>@Strings.UsernameLabel</th>
                    <th>@Strings.UserEmail</th>
                    <th>@Strings.UserRole</th>
                    <th>@Strings.UserIsActive</th>
                    <th class="text-right">@Strings.Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.FullName</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td>@GetLocalizedUserRole(user.Role)</td>
                        <td>
                            <span class="@(user.IsActive ? "text-green-600 font-semibold" : "text-red-600 font-semibold")">
                                @(user.IsActive ? Strings.Active : Strings.Inactive)
                            </span>
                        </td>
                        <td class="text-right table-actions">
                            <button class="btn btn-secondary btn-xs" @onclick="() => EditAccountant(user.Id)">@Strings.Edit</button>
                            <button class="btn @(user.IsActive ? "btn-warning" : "btn-success") btn-xs" @onclick="() => ToggleAccountantStatus(user)">
                                @(user.IsActive ? Strings.Disable : Strings.Enable)
                            </button>
                            @if (user.Username.ToLower() != "admin")
                            {
                                <button class="btn btn-danger btn-xs" @onclick="() => ConfirmDeleteAccountant(user)">@Strings.Delete</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<ConfirmDialog @ref="confirmDialog" />

@code {
    private List<UserDto>? users;
    private bool isLoading = true;
    private ConfirmDialog? confirmDialog;
    private AppStrings Strings = new();

    protected override async Task OnInitializedAsync()
    {
        Strings = await I18nTextService.GetTextTableAsync<AppStrings>(this);
        await LoadUsers();
        await base.OnInitializedAsync();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        StateHasChanged(); // Ensure loading indicator shows immediately
        try
        {
            users = (await AppUserService.GetAllUsersAsync()).OrderBy(u => u.FullName).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            users = new List<UserDto>(); 
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private string GetLocalizedUserRole(UserRole role)
    {
        return role switch
        {
            UserRole.Accountant => Strings.UserRoleAccountant,
            UserRole.Admin => Strings.UserRoleAdmin,
            _ => role.ToString()
        };
    }

    private void AddNewAccountant()
    {
        NavManager.NavigateTo("/admin/accountants/add");
    }

    private void EditAccountant(int userId)
    {
        NavManager.NavigateTo($"/admin/accountants/edit/{userId}");
    }

    private async Task ToggleAccountantStatus(UserDto user)
    {
        if (user.Username.ToLower() == "admin") return;

        var confirmationMessage = user.IsActive ? string.Format(Strings.ConfirmDisableUser, user.FullName) : string.Format(Strings.ConfirmEnableUser, user.FullName);
        
        if (confirmDialog != null && await confirmDialog.ShowAsync(confirmationMessage!))
        {
            try
            {
                await AppUserService.UpdateUserStatusAsync(user.Id, !user.IsActive);
                await LoadUsers(); 
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error toggling user status: {ex.Message}");
            }
        }
    }

    private async Task ConfirmDeleteAccountant(UserDto user)
    {
        if (user.Username.ToLower() == "admin")
        {
            await JSRuntime.InvokeVoidAsync("alert", Strings.CannotDeleteAdminUser);
            return;
        }
        
        if (confirmDialog != null && await confirmDialog.ShowAsync(string.Format(Strings.ConfirmDeleteMessage, user.FullName)!))
        {
            try
            {
                await AppUserService.DeleteUserAsync(user.Id);
                await LoadUsers();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting user: {ex.Message}");
            }
        }
    }
}