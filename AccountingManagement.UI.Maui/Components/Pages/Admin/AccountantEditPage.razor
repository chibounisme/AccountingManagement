@page "/admin/accountants/add"
@page "/admin/accountants/edit/{UserId:int}"
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "Admin")]

@inject IUserService AppUserService
@inject NavigationManager NavManager
@inject Toolbelt.Blazor.I18nText.I18nText I18nTextService

@if (isLoading)
{
    <LoadingIndicator Message="@Strings.Loading" />
}
else
{
    <div class="page-header">
        <h1>@(IsNewUser ? Strings.AddAccountantPageTitle : Strings.EditAccountantPageTitle)</h1>
    </div>

    <EditForm Model="@userModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        
        <div class="card max-w-2xl mx-auto">
            <div class="card-body space-y-6">
                <ValidationSummary class="mb-4 p-3 bg-red-100 text-red-700 rounded border border-red-300" />

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label for="fullName" class="form-label">@Strings.UserFullName</label>
                        <InputText id="fullName" class="form-input" @bind-Value="userModel.FullName" />
                        <ValidationMessage For="@(() => userModel.FullName)" class="validation-message" />
                    </div>

                    <div>
                        <label for="username" class="form-label">@Strings.UsernameLabel</label>
                        <InputText id="username" class="form-input" @bind-Value="userModel.Username" disabled="@(!IsNewUser && userModel.Username.ToLower() == "admin")" />
                        <ValidationMessage For="@(() => userModel.Username)" class="validation-message" />
                        @if (!string.IsNullOrEmpty(formErrorMessage))
                        {
                            <p class="validation-message">@formErrorMessage</p>
                        }
                    </div>

                    <div>
                        <label for="email" class="form-label">@Strings.UserEmail</label>
                        <InputText id="email" type="email" class="form-input" @bind-Value="userModel.Email" />
                        <ValidationMessage For="@(() => userModel.Email)" class="validation-message" />
                    </div>

                    <div>
                        <label for="role" class="form-label">@Strings.UserRole</label>
                        <InputSelect id="role" class="form-select" @bind-Value="userModel.Role" disabled="@(!IsNewUser && userModel.Username.ToLower() == "admin")">
                            @foreach (var role in Enum.GetValues<UserRole>())
                            {
                                <option value="@role">@GetLocalizedUserRole(role)</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => userModel.Role)" class="validation-message" />
                    </div>

                    <div>
                        <label for="password" class="form-label">
                            @Strings.PasswordLabel
                            @if (!IsNewUser) { <span class="text-xs text-gray-500">@Strings.OptionalLeaveBlank</span> }
                        </label>
                        <InputText id="password" type="password" class="form-input" @bind-Value="userModel.Password" />
                        <ValidationMessage For="@(() => userModel.Password)" class="validation-message" />
                    </div>

                    <div>
                        <label for="confirmPassword" class="form-label">@Strings.UserPasswordConfirm</label>
                        <InputText id="confirmPassword" type="password" class="form-input" @bind-Value="userModel.ConfirmPassword" />
                        <ValidationMessage For="@(() => userModel.ConfirmPassword)" class="validation-message" />
                    </div>
                </div>

                @if (!IsNewUser)
                {
                    <div class="pt-2">
                        <label class="form-label flex items-center">
                            <InputCheckbox @bind-Value="userModel.IsActive" class="form-checkbox mr-2" disabled="@(userModel.Username.ToLower() == "admin")" />
                            @Strings.UserIsActive
                        </label>
                         <ValidationMessage For="@(() => userModel.IsActive)" class="validation-message" />
                    </div>
                }
            </div>
            <div class="card-footer flex justify-end space-x-3">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">@Strings.Cancel</button>
                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <LoadingSpinner Small="true" /> @Strings.Saving
                    }
                    else
                    {
                        @Strings.Save
                    }
                </button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? UserId { get; set; }

    private UserFormModel userModel = new();
    private string? originalUsername;
    private string? formErrorMessage;

    private bool IsNewUser => UserId == null;
    private bool isLoading = true;
    private bool isSaving = false;
    private AppStrings Strings = new();

    protected override async Task OnInitializedAsync()
    {
        Strings = await I18nTextService.GetTextTableAsync<AppStrings>(this);
        if (!IsNewUser && UserId.HasValue)
        {
            var loadedUser = await AppUserService.GetUserByIdAsync(UserId.Value);
            if (loadedUser != null)
            {
                userModel.Id = loadedUser.Id;
                userModel.FullName = loadedUser.FullName;
                userModel.Username = loadedUser.Username;
                originalUsername = loadedUser.Username;
                userModel.Email = loadedUser.Email;
                userModel.Role = loadedUser.Role;
                userModel.IsActive = loadedUser.IsActive;
            }
            else
            {
                NavManager.NavigateTo("/admin/accountants"); 
                return;
            }
        }
        else 
        {
            userModel.IsActive = true;
            userModel.Role = UserRole.Accountant;
        }
        isLoading = false;
        await base.OnInitializedAsync();
    }

    private string GetLocalizedUserRole(UserRole role)
    {
        return role switch
        {
            UserRole.Accountant => Strings.UserRoleAccountant,
            UserRole.Admin => Strings.UserRoleAdmin,
            _ => role.ToString()
        };
    }

    private async Task HandleValidSubmit()
    {
        isSaving = true;
        formErrorMessage = null;
        StateHasChanged();

        try
        {
            if (IsNewUser)
            {
                var createUserDto = new CreateUserDto
                {
                    Username = userModel.Username,
                    Password = userModel.Password!, 
                    ConfirmPassword = userModel.ConfirmPassword!,
                    FullName = userModel.FullName,
                    Email = userModel.Email,
                    Role = userModel.Role
                };
                await AppUserService.CreateUserAsync(createUserDto);
            }
            else
            {
                var updateUserDto = new UpdateUserDto
                {
                    Id = userModel.Id,
                    Username = userModel.Username,
                    Password = userModel.Password, 
                    ConfirmPassword = userModel.ConfirmPassword,
                    FullName = userModel.FullName,
                    Email = userModel.Email,
                    Role = userModel.Role,
                    IsActive = userModel.IsActive
                };
                await AppUserService.UpdateUserAsync(updateUserDto);
            }
            NavManager.NavigateTo("/admin/accountants");
        }
        catch (ArgumentException ex) 
        {
            // Attempt to map common argument exceptions to localized strings
            if (ex.Message.Contains("Username already exists", StringComparison.OrdinalIgnoreCase))
            {
                 formErrorMessage = Strings.UserUsernameExists;
            } 
            else if (ex.Message.Contains("Passwords do not match", StringComparison.OrdinalIgnoreCase)) // This validation is usually client-side via [Compare]
            {
                formErrorMessage = Strings.UserPasswordMismatch; // Should be caught by DataAnnotations
            }
            else 
            {
                formErrorMessage = ex.Message; // Fallback to raw message
            }
        }
        catch (Exception ex)
        {
            formErrorMessage = Strings.Saving; // Generic error like "Error saving" could be a key
            Console.WriteLine($"Error saving user: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/admin/accountants");
    }

    public class UserFormModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "FullNameRequired")] 
        [StringLength(150, ErrorMessage = "FullNameLength")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "UsernameRequired")] 
        [StringLength(100, MinimumLength = 3, ErrorMessage = "UsernameLength")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "EmailRequired")] 
        [EmailAddress(ErrorMessage = "InvalidEmailFormat")]
        public string Email { get; set; } = string.Empty;

        public UserRole Role { get; set; } = UserRole.Accountant;
        public bool IsActive { get; set; } = true;
        
        [StringLength(100, MinimumLength = 6, ErrorMessage = "PasswordLength")]
        public string? Password { get; set; }

        [Compare(nameof(Password), ErrorMessage = "PasswordsDontMatch")]
        public string? ConfirmPassword { get; set; }

        [CustomValidation(typeof(UserFormModel), nameof(ValidatePasswordForNewUser))]
        public string? NewUserPasswordValidation => Password;
        
        public static ValidationResult? ValidatePasswordForNewUser(string? password, ValidationContext context)
        {
            var instance = (UserFormModel)context.ObjectInstance;
            if (instance.Id == 0 && string.IsNullOrWhiteSpace(password)) 
            {
                return new ValidationResult("PasswordRequiredForNewUser", new[] { nameof(Password) });
            }
            return ValidationResult.Success;
        }
    }
}