@inject Toolbelt.Blazor.I18nText.I18nText I18nTextService

@if (showDialog)
{
    <div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" @onclick="() => HandleResponse(false)"></div>

            <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">â€‹</span>

            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                            <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                            </svg>
                        </div>
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                                @(Title ?? GetDefaultTitle())
                            </h3>
                            <div class="mt-2">
                                <p class="text-sm text-gray-500">
                                    @Message
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="button" @onclick="() => HandleResponse(true)"
                            class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">
                        @Strings.Delete 
                    </button>
                    <button type="button" @onclick="() => HandleResponse(false)"
                            class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        @Strings.Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool showDialog = false;
    private string? Title;
    private string? Message;
    private TaskCompletionSource<bool> tcs = new();
    private AppStrings Strings = new();

    protected override async Task OnInitializedAsync()
    {
        Strings = await I18nTextService.GetTextTableAsync<AppStrings>(this);
        await base.OnInitializedAsync();
    }
    
    private string GetDefaultTitle()
    {
        // Ensure Strings is initialized before accessing its properties
        return (Strings.ConfirmDeleteMessage != null) ? Strings.ConfirmDeleteMessage.Replace(" {0}", "") : "Confirmation";
    }

    public Task<bool> ShowAsync(string message, string? title = null)
    {
        // It's safer to ensure Strings are loaded, especially if ShowAsync could be called
        // before OnInitializedAsync completes or from an external context.
        InvokeAsync(async () => {
            if (Strings.Delete == null) // Check if Strings is populated
            {
                Strings = await I18nTextService.GetTextTableAsync<AppStrings>(this);
            }
            this.Message = message;
            this.Title = title ?? GetDefaultTitle();
            this.showDialog = true;
            this.tcs = new TaskCompletionSource<bool>();
            StateHasChanged();
        });
        return tcs.Task;
    }

    private void HandleResponse(bool confirmed)
    {
        showDialog = false;
        tcs.SetResult(confirmed);
        StateHasChanged();
    }
}